"""
Service SMS pour PRO CHEZ NOUS
Support Twilio pour v√©rification par SMS
"""

import os
import requests
import secrets
import sqlite3
from datetime import datetime, timedelta
from base64 import b64encode

class SMSService:
    """Service pour envoyer des SMS via Twilio"""
    
    def __init__(self):
        self.account_sid = os.environ.get('TWILIO_ACCOUNT_SID', '')
        self.auth_token = os.environ.get('TWILIO_AUTH_TOKEN', '')
        self.phone_number = os.environ.get('TWILIO_PHONE_NUMBER', '')
        self.base_url = f"https://api.twilio.com/2010-04-01/Accounts/{self.account_sid}"
    
    def send_verification_code(self, to_phone, code=None):
        """
        Envoie un code de v√©rification par SMS
        
        Args:
            to_phone (str): Num√©ro de t√©l√©phone (format +228...)
            code (str): Code √† envoyer (g√©n√©r√© si None)
        
        Returns:
            dict: R√©sultat avec le code envoy√©
        """
        if not code:
            code = self.generate_verification_code()
        
        message = f"PRO CHEZ NOUS - Votre code de v√©rification est: {code}\n\nCe code expire dans 10 minutes."
        
        result = self.send_sms(to_phone, message)
        
        if result['success']:
            result['code'] = code
        
        return result
    
    def send_sms(self, to_phone, message):
        """
        Envoie un SMS via Twilio
        
        Args:
            to_phone (str): Num√©ro destinataire
            message (str): Contenu du message
        
        Returns:
            dict: R√©sultat de l'envoi
        """
        if not self.is_configured():
            return {
                'success': False,
                'error': 'Twilio non configur√©. D√©finissez TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN et TWILIO_PHONE_NUMBER'
            }
        
        try:
            url = f"{self.base_url}/Messages.json"
            
            # Authentification Basic Auth
            credentials = f"{self.account_sid}:{self.auth_token}"
            auth_header = b64encode(credentials.encode()).decode()
            
            headers = {
                "Authorization": f"Basic {auth_header}",
                "Content-Type": "application/x-www-form-urlencoded"
            }
            
            data = {
                "From": self.phone_number,
                "To": to_phone,
                "Body": message
            }
            
            response = requests.post(url, headers=headers, data=data)
            
            if response.status_code in [200, 201]:
                return {
                    'success': True,
                    'message_sid': response.json().get('sid')
                }
            else:
                return {
                    'success': False,
                    'error': f"Erreur Twilio: {response.status_code} - {response.text}"
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    @staticmethod
    def generate_verification_code(length=6):
        """G√©n√®re un code de v√©rification num√©rique"""
        return ''.join([str(secrets.randbelow(10)) for _ in range(length)])
    
    @staticmethod
    def store_verification_code(phone, code, db_path='database.db'):
        """Stocke un code de v√©rification dans la base"""
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Cr√©er la table si n√©cessaire
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sms_verifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                phone TEXT NOT NULL,
                code TEXT NOT NULL,
                expiration TEXT NOT NULL,
                used INTEGER DEFAULT 0
            )
        ''')
        
        expiration = (datetime.now() + timedelta(minutes=10)).strftime('%Y-%m-%d %H:%M:%S')
        
        cursor.execute('''
            INSERT INTO sms_verifications (phone, code, expiration, used)
            VALUES (?, ?, ?, 0)
        ''', (phone, code, expiration))
        
        conn.commit()
        conn.close()
    
    @staticmethod
    def verify_code(phone, code, db_path='database.db'):
        """
        V√©rifie un code de v√©rification
        
        Returns:
            bool: True si code valide
        """
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM sms_verifications 
            WHERE phone = ? AND code = ? AND used = 0
            ORDER BY id DESC LIMIT 1
        ''', (phone, code))
        
        verification = cursor.fetchone()
        
        if not verification:
            conn.close()
            return False
        
        expiration = datetime.strptime(verification[3], '%Y-%m-%d %H:%M:%S')
        
        if datetime.now() > expiration:
            conn.close()
            return False
        
        # Marquer comme utilis√©
        cursor.execute('''
            UPDATE sms_verifications SET used = 1 WHERE id = ?
        ''', (verification[0],))
        
        conn.commit()
        conn.close()
        
        return True
    
    def is_configured(self):
        """V√©rifie si le service SMS est configur√©"""
        return bool(self.account_sid and self.auth_token and self.phone_number)


# Instance globale
sms_service = SMSService()


# Tests
if __name__ == '__main__':
    print("üì± Test du service SMS")
    service = SMSService()
    print(f"Configur√©: {service.is_configured()}")
    
    # Test de g√©n√©ration de code
    code = service.generate_verification_code()
    print(f"Code g√©n√©r√©: {code}")
    
    if not service.is_configured():
        print("\n‚ö†Ô∏è  Twilio n'est pas configur√©.")
        print("D√©finissez les variables d'environnement:")
        print("  - TWILIO_ACCOUNT_SID")
        print("  - TWILIO_AUTH_TOKEN")
        print("  - TWILIO_PHONE_NUMBER")
