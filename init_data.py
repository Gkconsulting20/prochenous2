import sqlite3
from datetime import datetime, timedelta
import random
import bcrypt

def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

def init_default_data():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    
    print("üìä Cr√©ation des tables si n√©cessaire...")
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            name TEXT,
            email TEXT UNIQUE,
            password TEXT,
            role TEXT,
            localisation TEXT,
            categorie TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS slots (
            id INTEGER PRIMARY KEY,
            pro_id INTEGER,
            date TEXT,
            FOREIGN KEY(pro_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS rendezvous (
            id INTEGER PRIMARY KEY,
            pro_id INTEGER,
            client_id INTEGER,
            date TEXT,
            FOREIGN KEY(pro_id) REFERENCES users(id),
            FOREIGN KEY(client_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS avis (
            id INTEGER PRIMARY KEY,
            pro_id INTEGER,
            client_id INTEGER,
            note INTEGER,
            commentaire TEXT,
            date TEXT,
            FOREIGN KEY(pro_id) REFERENCES users(id),
            FOREIGN KEY(client_id) REFERENCES users(id)
        )
    ''')
    conn.commit()
    
    print("üóëÔ∏è  Nettoyage de la base de donn√©es...")
    cursor.execute('DELETE FROM avis')
    cursor.execute('DELETE FROM rendezvous')
    cursor.execute('DELETE FROM slots')
    cursor.execute('DELETE FROM users')
    conn.commit()
    
    print("üë• Cr√©ation des professionnels PRO CHEZ NOUS...")
    # Format: (nom, email, mot_de_passe, role, localisation, cat√©gorie)
    professionals = [
        ('Marc Dupont', 'marc.plombier@prochesnous.fr', 'demo123', 'pro', 'Paris 15e', 'Plomberie'),
        ('Sophie √âlectric', 'sophie.elec@prochesnous.fr', 'demo123', 'pro', 'Lyon 3e', '√âlectricit√©'),
        ('Jean Peinture', 'jean.peintre@prochesnous.fr', 'demo123', 'pro', 'Marseille', 'Peinture'),
        ('Marie Bois', 'marie.menuisiere@prochesnous.fr', 'demo123', 'pro', 'Toulouse', 'Menuiserie'),
        ('Pierre Ma√ßon', 'pierre.macon@prochesnous.fr', 'demo123', 'pro', 'Nice', 'Ma√ßonnerie'),
        ('Claire R√©nov', 'claire.renov@prochesnous.fr', 'demo123', 'pro', 'Nantes', 'R√©novation'),
        ('Lucas Vitrier', 'lucas.vitrier@prochesnous.fr', 'demo123', 'pro', 'Bordeaux', 'Vitrerie'),
        ('Emma Jardin', 'emma.jardin@prochesnous.fr', 'demo123', 'pro', 'Strasbourg', 'Jardinage'),
        ('Hugo Serrure', 'hugo.serrurier@prochesnous.fr', 'demo123', 'pro', 'Lille', 'Serrurerie'),
        ('L√©a Toiture', 'lea.couvreur@prochesnous.fr', 'demo123', 'pro', 'Rennes', 'Toiture'),
        ('Thomas Chauffage', 'thomas.chauffage@prochesnous.fr', 'demo123', 'pro', 'Paris 11e', 'Autre'),
        ('Nadia Nettoyage', 'nadia.nettoyage@prochesnous.fr', 'demo123', 'pro', 'Lyon 7e', 'Autre')
    ]
    
    for pro in professionals:
        hashed_pwd = hash_password(pro[2])
        cursor.execute('INSERT INTO users (name, email, password, role, localisation, categorie) VALUES (?, ?, ?, ?, ?, ?)', 
                      (pro[0], pro[1], hashed_pwd, pro[3], pro[4], pro[5]))
    
    print("üë§ Cr√©ation des clients...")
    clients = [
        ('Client Demo', 'client@example.com', 'demo123', 'user', None, None),
        ('Alice Dupont', 'alice@example.com', 'demo123', 'user', None, None),
        ('Bob Martin', 'bob@example.com', 'demo123', 'user', None, None)
    ]
    
    for client in clients:
        hashed_pwd = hash_password(client[2])
        cursor.execute('INSERT INTO users (name, email, password, role, localisation, categorie) VALUES (?, ?, ?, ?, ?, ?)', 
                      (client[0], client[1], hashed_pwd, client[3], client[4], client[5]))
    
    conn.commit()
    
    print("‚≠ê Ajout des avis...")
    reviews = [
        (1, 1, 5, 'Excellente professionnelle! Tr√®s √† l\'√©coute et efficace.'),
        (1, 2, 5, 'Service impeccable, je recommande vivement!'),
        (1, 3, 4, 'Tr√®s bon service, ponctuelle et professionnelle.'),
        (2, 1, 4, 'Bon professionnel, travail de qualit√©.'),
        (2, 2, 5, 'Parfait! Exactement ce que je cherchais.'),
        (3, 1, 5, 'Excellente prestation, tr√®s satisfait!'),
        (3, 3, 4, 'Bonne qualit√© de service.'),
        (4, 2, 3, 'Correct, mais peut mieux faire.'),
        (5, 1, 5, 'Incroyable! Je reviendrai sans h√©siter.'),
        (5, 2, 5, 'Professionnalisme au top!'),
        (6, 3, 4, 'Tr√®s bien, bon rapport qualit√©/prix.'),
        (7, 1, 5, 'Excellent travail, recommand√©!'),
        (8, 2, 4, 'Bon service dans l\'ensemble.'),
        (9, 1, 5, 'Parfait du d√©but √† la fin!')
    ]
    
    today = datetime.now()
    for review in reviews:
        date_review = (today - timedelta(days=random.randint(1, 60))).strftime('%Y-%m-%d')
        cursor.execute('INSERT INTO avis (pro_id, client_id, note, commentaire, date) VALUES (?, ?, ?, ?, ?)', 
                      (review[0], review[1], review[2], review[3], date_review))
    
    print("üìÖ Ajout des cr√©neaux disponibles...")
    base_date = datetime.now() + timedelta(days=1)
    
    for pro_id in range(1, 11):
        for i in range(5):
            slot_date = (base_date + timedelta(days=i)).strftime('%Y-%m-%d')
            hours = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00']
            for hour in random.sample(hours, 3):
                cursor.execute('INSERT INTO slots (pro_id, date) VALUES (?, ?)', 
                             (pro_id, f"{slot_date} {hour}"))
    
    print("üìÜ Ajout de quelques rendez-vous...")
    past_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d 10:00')
    cursor.execute('INSERT INTO rendezvous (pro_id, client_id, date) VALUES (?, ?, ?)', (1, 1, past_date))
    cursor.execute('INSERT INTO rendezvous (pro_id, client_id, date) VALUES (?, ?, ?)', (2, 2, past_date))
    
    conn.commit()
    conn.close()
    
    print("\n‚úÖ Base de donn√©es initialis√©e avec succ√®s!")
    print("\nüìã Informations de connexion:")
    print("   Client: client@example.com / demo123")
    print("   Pro: sophie.martin@example.com / demo123")

if __name__ == '__main__':
    init_default_data()
