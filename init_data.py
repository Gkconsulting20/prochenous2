import sqlite3
from datetime import datetime, timedelta
import random
import bcrypt

def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

def init_default_data():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    
    print("üìä Cr√©ation des tables si n√©cessaire...")
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            name TEXT,
            email TEXT UNIQUE,
            password TEXT,
            role TEXT,
            localisation TEXT,
            categorie TEXT,
            plan TEXT DEFAULT 'gratuit',
            statut_verification TEXT DEFAULT 'non_verifie'
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS slots (
            id INTEGER PRIMARY KEY,
            pro_id INTEGER,
            date TEXT,
            FOREIGN KEY(pro_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS rendezvous (
            id INTEGER PRIMARY KEY,
            pro_id INTEGER,
            client_id INTEGER,
            date TEXT,
            FOREIGN KEY(pro_id) REFERENCES users(id),
            FOREIGN KEY(client_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS avis (
            id INTEGER PRIMARY KEY,
            pro_id INTEGER,
            client_id INTEGER,
            note INTEGER,
            commentaire TEXT,
            date TEXT,
            FOREIGN KEY(pro_id) REFERENCES users(id),
            FOREIGN KEY(client_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS profils_pro (
            id INTEGER PRIMARY KEY,
            pro_id INTEGER UNIQUE,
            description TEXT,
            tarif_horaire TEXT,
            experience TEXT,
            certifications TEXT,
            photo_url TEXT,
            FOREIGN KEY(pro_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY,
            expediteur_id INTEGER,
            destinataire_id INTEGER,
            contenu TEXT,
            date TEXT,
            lu INTEGER DEFAULT 0,
            FOREIGN KEY(expediteur_id) REFERENCES users(id),
            FOREIGN KEY(destinataire_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS favoris (
            id INTEGER PRIMARY KEY,
            client_id INTEGER,
            pro_id INTEGER,
            date_ajout TEXT,
            FOREIGN KEY(client_id) REFERENCES users(id),
            FOREIGN KEY(pro_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS documents_verification (
            id INTEGER PRIMARY KEY,
            pro_id INTEGER,
            type_document TEXT,
            nom_fichier TEXT,
            chemin_fichier TEXT,
            date_upload TEXT,
            statut TEXT DEFAULT 'en_attente',
            FOREIGN KEY(pro_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS password_reset_tokens (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            token TEXT UNIQUE NOT NULL,
            expiration TEXT NOT NULL,
            used INTEGER DEFAULT 0,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')
    conn.commit()
    
    print("üóëÔ∏è  Nettoyage de la base de donn√©es...")
    cursor.execute('DELETE FROM documents_verification')
    cursor.execute('DELETE FROM favoris')
    cursor.execute('DELETE FROM messages')
    cursor.execute('DELETE FROM profils_pro')
    cursor.execute('DELETE FROM avis')
    cursor.execute('DELETE FROM rendezvous')
    cursor.execute('DELETE FROM slots')
    cursor.execute('DELETE FROM users')
    conn.commit()
    
    print("üë• Cr√©ation des professionnels PRO CHEZ NOUS...")
    # Format: (nom, email, mot_de_passe, role, localisation, cat√©gorie, plan)
    professionals = [
        ('Marc Dupont', 'marc.plombier@prochesnous.fr', 'demo123', 'pro', 'Paris 15e', 'Plomberie', 'premium'),
        ('Sophie √âlectric', 'sophie.elec@prochesnous.fr', 'demo123', 'pro', 'Lyon 3e', '√âlectricit√©', 'premium'),
        ('Jean Peinture', 'jean.peintre@prochesnous.fr', 'demo123', 'pro', 'Marseille', 'Peinture', 'gratuit'),
        ('Marie Bois', 'marie.menuisiere@prochesnous.fr', 'demo123', 'pro', 'Toulouse', 'Menuiserie', 'premium'),
        ('Pierre Ma√ßon', 'pierre.macon@prochesnous.fr', 'demo123', 'pro', 'Nice', 'Ma√ßonnerie', 'gratuit'),
        ('Claire R√©nov', 'claire.renov@prochesnous.fr', 'demo123', 'pro', 'Nantes', 'R√©novation', 'premium'),
        ('Lucas Vitrier', 'lucas.vitrier@prochesnous.fr', 'demo123', 'pro', 'Bordeaux', 'Vitrerie', 'gratuit'),
        ('Emma Jardin', 'emma.jardin@prochesnous.fr', 'demo123', 'pro', 'Strasbourg', 'Jardinage', 'premium'),
        ('Hugo Serrure', 'hugo.serrurier@prochesnous.fr', 'demo123', 'pro', 'Lille', 'Serrurerie', 'gratuit'),
        ('L√©a Toiture', 'lea.couvreur@prochesnous.fr', 'demo123', 'pro', 'Rennes', 'Toiture', 'premium'),
        ('Thomas Chauffage', 'thomas.chauffage@prochesnous.fr', 'demo123', 'pro', 'Paris 11e', 'Autre', 'gratuit'),
        ('Nadia Nettoyage', 'nadia.nettoyage@prochesnous.fr', 'demo123', 'pro', 'Lyon 7e', 'Autre', 'gratuit')
    ]
    
    for pro in professionals:
        hashed_pwd = hash_password(pro[2])
        cursor.execute('INSERT INTO users (name, email, password, role, localisation, categorie, plan) VALUES (?, ?, ?, ?, ?, ?, ?)', 
                      (pro[0], pro[1], hashed_pwd, pro[3], pro[4], pro[5], pro[6]))
    
    print("üë§ Cr√©ation des clients...")
    # Format: (nom, email, mot_de_passe, role, localisation, cat√©gorie, plan)
    clients = [
        ('Client Demo', 'client@example.com', 'demo123', 'user', None, None, 'premium'),
        ('Alice Dupont', 'alice@example.com', 'demo123', 'user', None, None, 'gratuit'),
        ('Bob Martin', 'bob@example.com', 'demo123', 'user', None, None, 'gratuit')
    ]
    
    for client in clients:
        hashed_pwd = hash_password(client[2])
        cursor.execute('INSERT INTO users (name, email, password, role, localisation, categorie, plan) VALUES (?, ?, ?, ?, ?, ?, ?)', 
                      (client[0], client[1], hashed_pwd, client[3], client[4], client[5], client[6]))
    
    conn.commit()
    
    print("‚≠ê Ajout des avis...")
    reviews = [
        (1, 1, 5, 'Excellente professionnelle! Tr√®s √† l\'√©coute et efficace.'),
        (1, 2, 5, 'Service impeccable, je recommande vivement!'),
        (1, 3, 4, 'Tr√®s bon service, ponctuelle et professionnelle.'),
        (2, 1, 4, 'Bon professionnel, travail de qualit√©.'),
        (2, 2, 5, 'Parfait! Exactement ce que je cherchais.'),
        (3, 1, 5, 'Excellente prestation, tr√®s satisfait!'),
        (3, 3, 4, 'Bonne qualit√© de service.'),
        (4, 2, 3, 'Correct, mais peut mieux faire.'),
        (5, 1, 5, 'Incroyable! Je reviendrai sans h√©siter.'),
        (5, 2, 5, 'Professionnalisme au top!'),
        (6, 3, 4, 'Tr√®s bien, bon rapport qualit√©/prix.'),
        (7, 1, 5, 'Excellent travail, recommand√©!'),
        (8, 2, 4, 'Bon service dans l\'ensemble.'),
        (9, 1, 5, 'Parfait du d√©but √† la fin!')
    ]
    
    today = datetime.now()
    for review in reviews:
        date_review = (today - timedelta(days=random.randint(1, 60))).strftime('%Y-%m-%d')
        cursor.execute('INSERT INTO avis (pro_id, client_id, note, commentaire, date) VALUES (?, ?, ?, ?, ?)', 
                      (review[0], review[1], review[2], review[3], date_review))
    
    print("üìÖ Ajout des cr√©neaux disponibles...")
    base_date = datetime.now() + timedelta(days=1)
    
    for pro_id in range(1, 11):
        for i in range(5):
            slot_date = (base_date + timedelta(days=i)).strftime('%Y-%m-%d')
            hours = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00']
            for hour in random.sample(hours, 3):
                cursor.execute('INSERT INTO slots (pro_id, date) VALUES (?, ?)', 
                             (pro_id, f"{slot_date} {hour}"))
    
    print("üìÜ Ajout de quelques rendez-vous...")
    past_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d 10:00')
    cursor.execute('INSERT INTO rendezvous (pro_id, client_id, date) VALUES (?, ?, ?)', (1, 1, past_date))
    cursor.execute('INSERT INTO rendezvous (pro_id, client_id, date) VALUES (?, ?, ?)', (2, 2, past_date))
    
    print("üíé Ajout des profils enrichis pour les professionnels premium...")
    profils_premium = [
        (1, 'Plombier exp√©riment√© sp√©cialis√© dans les installations sanitaires modernes. Interventions rapides et soign√©es.', '45‚Ç¨/h', '15 ans', 'Certification Qualibat, Assurance d√©cennale'),
        (2, '√âlectricienne dipl√¥m√©e, sp√©cialiste en domotique et syst√®mes √©lectriques intelligents.', '50‚Ç¨/h', '10 ans', 'Certification Qualifelec, Habilitation √©lectrique'),
        (4, 'Menuisi√®re passionn√©e, cr√©ations sur mesure en bois massif. Travail artisanal de qualit√©.', '42‚Ç¨/h', '12 ans', 'CAP Menuiserie, Artisan d\'Art'),
        (6, 'Experte en r√©novation compl√®te d\'appartements et maisons. Coordination de tous les corps de m√©tier.', '55‚Ç¨/h', '18 ans', 'Certification RGE, Assurance tous risques'),
        (8, 'Paysagiste et jardini√®re professionnelle. Cr√©ation et entretien d\'espaces verts.', '38‚Ç¨/h', '8 ans', 'Dipl√¥me d\'√âtat Paysagiste'),
        (10, 'Couvreur expert en toiture traditionnelle et isolation. Garantie d√©cennale.', '48‚Ç¨/h', '20 ans', 'Certification Qualibat, Expert ardoise et tuile')
    ]
    
    for profil in profils_premium:
        cursor.execute('INSERT INTO profils_pro (pro_id, description, tarif_horaire, experience, certifications) VALUES (?, ?, ?, ?, ?)', 
                      profil)
    
    conn.commit()
    conn.close()
    
    print("\n‚úÖ Base de donn√©es initialis√©e avec succ√®s!")
    print("\nüìã Informations de connexion:")
    print("   Client: client@example.com / demo123")
    print("   Pro: sophie.martin@example.com / demo123")

if __name__ == '__main__':
    init_default_data()
